<?php
/**
 * @file
 * Install functions for Password Policy module.
 */

/**
 * Implements hook_schema().
 */
function password_policy_schema() {
  $schema['password_policy'] = array(
    'description' => t('Table storing Password Policies.'),
    'export' => array(
      'key' => 'name',
      'key name' => 'Name',
      'primary key' => 'name',
      'identifier' => 'password_policy', // Exports will be as $myobj
      'default hook' => 'default_password_policy',  // Function hook name.
      'api' => array(
        'owner' => 'password_policy',
        'api' => 'default_password_policy',  // Base name for api include files.
        'minimum_version' => 1,
        'current_version' => 1,
      ),
      // If the key is stored in a table that is joined in, specify it:
     // 'key in table' => 'my_join_table',

    ),
    'fields' => array(
      'name' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
        'description' => 'Unique ID for a Password Policy.',
      ),
      'config' => array(
        'type' => 'text',
        'not null' => FALSE,
        'description' => 'Configuration for Password Policy',
      ),
    ),
    'primary key' => array('name'),
  );

  $schema['password_policy_history'] = array(
    'description' => t("Stores user's old password hashes."),
    'fields' => array(
      'hid' => array(
        'description' => 'Primary Key: Unique history ID.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => t("User's {users}.uid."),
        'type' => 'int',
        'not null' => TRUE,
      ),
      'pass' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => "User's password (hashed).",
      ),
      'created' => array(
        'description' => t('Timestamp for when the policy was created.'),
        'type' => 'int',
        'not null' => TRUE,
      ),
    ),
    'foreign keys' => array(
      'password_policy' => array(
        'table' => 'password_policy',
        'columns' => array('name' => 'name'),
      ),
      'user' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
    ),
    'indexes' => array('uid' => array('uid')),
    'primary key' => array('hid'),
  );
  $schema['password_policy_notice_history'] = array(
    'description' => t('Recorded when notices are sent'),
    'fields' => array(
      'nhid' => array(
        'description' => 'Primary Key: Unique notice history ID.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'hid' => array(
        'description' => t('Password history id.'),
        'type' => 'int',
        'not null' => TRUE,
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => t('Policy name.'),
      ),
      'timeframe' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => "Timeframe instruction when sent",
      ),
      'sent' => array(
        'description' => t('Timestamp for when notice was sent.'),
        'type' => 'int',
        'not null' => TRUE,
      ),
    ),
    'foreign keys' => array(
      'password_policy' => array(
        'table' => 'password_policy',
        'columns' => array('name' => 'name'),
      ),
      'password_policy_history' => array(
        'table' => 'password_policy_history',
        'columns' => array('hid' => 'hid'),
      ),
    ),
    'indexes' => array('timeframe' => array('timeframe')),
    'primary key' => array('nhid'),
  );

  return $schema;
}

/**
 * Implementation of hook_update_N()
 */
function password_policy_install() {
  variable_set('password_policy_install_time', time());
}

/**
 * Implementation of hook_uninstall()
 */
function password_policy_uninstall() {
  // Remove any values the module added to the {variables} table
  variable_del('password_policy_install_time');
}

/**
 * Set a flag to denote the time that the new force plugin was installed.
 */
function password_policy_update_7200() {
  variable_set('password_policy_install_time', time());
}


/**
 * Delete not used item for table "password_policy_history".
 */
function password_policy_update_7300() {
  $query = db_select('password_policy_history', 'p');
  $query->leftJoin('users', 'u', 'p.uid = u.uid');
  $query->isNull('u.uid');
  $query->fields('p', array('uid', 'hid'));

  foreach ($query->execute() as $record) {
    db_delete('password_policy_history')
      ->condition('uid', $record->uid)
      ->condition('hid', $record->hid)
      ->execute();
   }
}

